# 로컬 스토리지를 이용한 최근 스캔 내역 기능 구현

**Task ID:** T-003
**Status:** DONE
**Importance:** MUST
**Complexity:** 8/10
**Urgency:** 8/10
**Dependencies:** None

## Description

브라우저의 `localStorage`를 사용하여 최근 스캔한 주문 내역을 저장하고 관리하는 기능을 구현합니다. `zustand`를 사용하여 상태를 관리하고, custom hook을 통해 컴포넌트에서 쉽게 사용할 수 있도록 설계해주세요.

### User Journey
`주문 조회 성공` -> `해당 주문이 최근 내역 목록 맨 앞에 추가됨` -> `사용자가 헤더의 '내역' 아이콘 클릭` -> `최근 스캔 내역(최대 20개)이 담긴 패널이 열림` -> `특정 내역 클릭` -> `해당 주문 상세 페이지로 이동`

### Functional Requirements

1.  **Zustand Store 생성 (`src/features/history/store.ts`)**
    *   상태(State): `history: Order[]` (Order 타입은 임시로 정의)
    *   액션(Actions):
        *   `addHistory(order: Order)`: 새로운 주문을 내역 배열의 맨 앞에 추가합니다. 내역이 20개를 초과하면 가장 오래된 항목을 제거합니다.
        *   `clearHistory()`: 모든 내역을 삭제합니다.
        *   `loadHistory()`: `localStorage`에서 데이터를 불러와 상태를 초기화합니다.

2.  **Order 타입 정의 (`src/features/history/types.ts`)**
    ```typescript
    export interface Order {
      orderNo: string;
      customerName: string;
      status: '인쇄중' | '완료' | '대기';
      thumbnailUrl: string; // 대표 썸네일 이미지 URL
      scannedAt: string; // ISO 8601 형식의 스캔 시각
    }
    ```

3.  **LocalStorage 연동**
    *   `zustand/middleware`의 `persist` 미들웨어를 사용하여 스토어의 상태가 변경될 때마다 `localStorage`에 자동으로 동기화되도록 설정해주세요.
    *   Storage key는 `barcode-scan-history`로 지정합니다.

4.  **Custom Hook (`src/features/history/hooks/useHistory.ts`)**
    *   위에서 생성한 Zustand 스토어를 사용하는 `useHistory` 훅을 만들어 컴포넌트에서 쉽게 상태와 액션을 사용할 수 있도록 합니다.

5.  **컴포넌트 연동**
    *   **주문 상세 페이지 (`/order/[orderNo]/page.tsx`)**: 페이지가 로드될 때 `useEffect`를 사용하여 `addHistory` 액션을 호출하고, 현재 보고 있는 주문(목업 데이터)을 최근 내역에 추가하는 로직을 구현합니다.
    *   **최근 내역 패널 (`src/features/history/components/HistoryPanel.tsx`)**: 
        *   `shadcn/ui`의 `Sheet` 컴포넌트를 사용하여 화면 우측에서 슬라이드되어 나오는 패널을 만듭니다.
        *   `useHistory` 훅을 사용하여 최근 내역 목록을 가져와 리스트 형태로 렌더링합니다.
        *   각 리스트 아이템은 주문번호, 고객명, 스캔 시각을 표시하고, 클릭 시 해당 주문 상세 페이지로 이동하는 `Link` 컴포넌트로 감쌉니다.
        *   패널 헤더에는 "최근 스캔 내역" 제목과 `clearHistory` 액션을 호출하는 "전체 삭제" 버튼을 추가합니다.
    *   **헤더 (`src/components/layout/Header.tsx`)**: `HistoryPanel`을 열고 닫는 트리거 버튼 (lucide-react의 `History` 아이콘)을 추가합니다.

### Data Flow
1.  **Order Detail Page Mounts**: `useEffect` -> `useHistory.addHistory(mockOrder)`
2.  **Zustand Store**: `addHistory` 액션 실행 -> `history` 상태 업데이트
3.  **Persist Middleware**: 변경된 `history` 상태를 `localStorage`에 JSON 형태로 저장
4.  **Header**: `History` 아이콘 클릭 -> `Sheet` 컴포넌트(HistoryPanel) 열기
5.  **HistoryPanel**: `useHistory` 훅으로 `history` 상태 구독 -> 최신 목록 렌더링

MUST Guidelines:
- only implement what is written in prompt.
- tidy first.



  

---

**Created:** 2025-10-09T09:23:55.066Z
**Updated:** 2025-10-11T01:28:59.533Z
