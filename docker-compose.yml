version: '3.9'

services:
  # 실시간 통신 서버 (Socket.IO)
  realtime-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: barcode-realtime-server
    environment:
      NODE_ENV: production
      PORT: 3001
      SOCKET_JWT_SECRET: ${SOCKET_JWT_SECRET:-change-me-in-production}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3001:3001"
    expose:
      - "3001"
    volumes:
      - ./logs:/app/logs
      - /app/node_modules # 호스트의 node_modules 사용 방지
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - barcode-network
    labels:
      - "com.barcode.service=realtime-server"
      - "com.barcode.version=1.0"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx 리버스 프록시 & TLS 종료
  nginx-proxy:
    image: nginx:stable-alpine
    container_name: barcode-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      realtime-server:
        condition: service_healthy
    networks:
      - barcode-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/healthz"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    labels:
      - "com.barcode.service=nginx-proxy"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 선택사항: 모니터링 (Prometheus + Grafana)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: barcode-prometheus
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus-data:/prometheus
  #   ports:
  #     - "9090:9090"
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--storage.tsdb.path=/prometheus"
  #   networks:
  #     - barcode-network
  #   restart: unless-stopped

  # 선택사항: 로그 집계 (ELK Stack)
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.0.0
  #   container_name: barcode-elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - elasticsearch-data:/usr/share/elasticsearch/data
  #   networks:
  #     - barcode-network

networks:
  barcode-network:
    driver: bridge
    name: barcode-network

volumes:
  # prometheus-data:
  # elasticsearch-data:

# 환경변수 파일: .env
# NODE_ENV=production
# SOCKET_JWT_SECRET=your-secret-key-here
# CORS_ORIGINS=https://app.example.com,https://monitor.example.com
# LOG_LEVEL=info

# 실행 명령어:
# docker-compose up -d
# docker-compose logs -f
# docker-compose down
