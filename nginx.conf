# Nginx 프록시 설정 (T-009)
# 실시간 서버 및 Next.js 앱 라우팅

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 2048;
  use epoll;
  multi_accept on;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log /var/log/nginx/access.log main;

  # 성능 최적화
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;
  client_max_body_size 20M;

  # Gzip 압축
  gzip on;
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
  gzip_disable "msie6";

  # 보안 헤더 (T-009)
  map $scheme $hsts {
    https "max-age=31536000; includeSubDomains; preload";
  }

  # 업스트림 정의
  upstream realtime_backend {
    least_conn;
    server realtime-server:3001 max_fails=3 fail_timeout=30s;
    keepalive 32;
  }

  # HTTP → HTTPS 리다이렉트
  server {
    listen 80 default_server;
    server_name _;
    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }
    location / {
      return 301 https://$host$request_uri;
    }
  }

  # HTTPS 서버 (TLS 1.2+, HTTP/2)
  server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name _;

    # SSL/TLS 인증서 (로컬 개발용, 프로덕션에서는 Let's Encrypt 사용)
    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    # SSL 보안 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # 보안 헤더
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # 헬스체크 엔드포인트
    location /healthz {
      access_log off;
      return 200 '{"status":"ok"}';
      add_header Content-Type application/json;
    }

    # 상태 페이지 (기본 정보만)
    location /status {
      access_log off;
      stub_status on;
      allow 127.0.0.1;
      allow 172.16.0.0/12; # Docker 내부 네트워크
      deny all;
    }

    # Socket.IO 실시간 서버 라우팅
    location /socket.io {
      proxy_pass http://realtime_backend;
      proxy_http_version 1.1;

      # WebSocket 업그레이드 헤더 (T-009)
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      # 프록시 헤더
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $server_name;

      # 타임아웃
      proxy_connect_timeout 7d;
      proxy_send_timeout 7d;
      proxy_read_timeout 7d;

      # 버퍼 비활성화 (실시간 데이터)
      proxy_buffering off;
    }

    # API 라우팅 (실시간 서버)
    location /api {
      proxy_pass http://realtime_backend;
      proxy_http_version 1.1;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # 타임아웃
      proxy_connect_timeout 60s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;

      # 자동 재시도
      proxy_next_upstream error timeout http_502 http_503 http_504;
      proxy_next_upstream_tries 2;
    }

    # 헬스체크 엔드포인트 (실시간 서버)
    location /health {
      proxy_pass http://realtime_backend;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      access_log off;
    }

    # 정적 파일 캐싱
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
      expires 1y;
      add_header Cache-Control "public, immutable";
      access_log off;
    }

    # 루트 경로 (웹앱은 Vercel이나 다른 호스트에서 제공된다고 가정)
    location / {
      return 404;
    }
  }
}
