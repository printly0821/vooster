{
  "rules": [
    {
      "type": "prd",
      "content": "# 바코드 주문 조회 웹앱 PRD\n\n## 1. 제품 개요\n인쇄 생산 현장에서 카메라로 바코드를 스캔하면 주문번호를 자동 식별하고, REST API로 받아온 주문 상세·썸네일 이미지를 즉시 보여주는 반응형 웹 애플리케이션. 어떠한 기기(러기드 PDA, 스마트폰, 태블릿, PC)에서도 사용 가능하며, 작업 흐름을 끊지 않는 빠른 조회 경험을 제공한다.\n\n## 2. 문제 정의\n1. 주문 정보를 확인하려면 PC 앞으로 이동해야 해 공정이 지연된다.\n2. 썸네일을 찾기 어렵고 출력물이 잘못 인쇄될 위험이 있다.\n3. 여러 주문을 연속 처리할 때 이전 내역 재확인이 번거롭다.\n\n## 3. 목표\n1. 바코드 스캔 후 3초 이내에 주문 상세·이미지를 표시한다.\n2. 출력 오류·오배송률을 20% 이상 감소시킨다.\n3. 최근 스캔 내역 기능으로 반복 조회 시간을 50% 단축한다.\n\n## 4. 대상 사용자 (페르소나)\n| 페르소나 | 목표 | 기기 |\n|---|---|---|\n| 현장 작업자 김라인 | 스캔해 즉시 주문·썸네일 확인, 빠른 진행 | 러기드 PDA, 스마트폰 |\n| 작업 관리자 박매니 | 여러 주문을 연속 스캔·모니터링 | 태블릿, PC |\n| 품질 검사원 이QC | 출력물과 주문 이미지를 대조, 오류 제로 | 스마트폰, 태블릿 |\n\n## 5. 핵심 지표 (Success Metrics)\n1. 스캔→주문표시 평균 시간 ≤ 3초\n2. 최초 배포 1개월 내 일일 활성 사용자(DAU) 30명 달성\n3. 출력물 오류/오배송 건수 20% 감소\n4. 최근 내역 사용 비율 60% 이상\n\n## 6. 주요 기능 요구사항\n### 6.1 MVP 기능\n| ID | 기능 | 설명 |\n|---|---|---|\n| F-01 | 바코드 스캔 | 기기 카메라로 1D/2D 바코드 인식 후 주문번호 추출 |\n| F-02 | 주문 상세 조회 | REST API 호출로 주문명, 수량, 옵션, 상태, 썸네일 URL 수신 |\n| F-03 | 썸네일 그리드 | 주문에 포함된 썸네일 전체를 그리드로 표시 |\n| F-05 | 최근 스캔 내역(20건) | 로컬 저장소에 기록, 탭 한 번으로 재조회 |\n| F-06 | 세컨드 모니터 제작의뢰서 표시 | 바코드 스캔 시 세컨드 모니터(또는 외부 디스플레이)에 해당 주문의 제작의뢰서 자동 표시 (Window Management API 또는 Puppeteer 활용) |\n| F-05 | 최근 스캔 내역(20건) | 로컬 저장소에 기록, 탭 한 번으로 재조회 |\n| F-06 | 다크 모드 | 현장 조도에 맞춰 자동/수동 전환 |\n\n### 6.2 차후(Phase 2+) 기능\n| ID | 기능 | 설명 |\n|---|---|---|\n| F-07 | 주문 상태 실시간 업데이트 | WebSocket 또는 SSE로 상태 변경 푸시 |\n| F-08 | 오프라인 캐싱 | 네트워크 불안정 시 마지막 주문 데이터 표시 & 재시도 |\n| F-09 | 오류 리포트 | 잘못 인식된 데이터 즉시 신고 & 로그 전송 |\n\n## 7. 사용자 흐름 (고수준)\n1. 사용자가 웹앱 열기 → 카메라 권한 허용\n2. 바코드 조준 → 자동 초점 & 인식\n3. 주문번호 추출 → REST API 호출\n4. 주문 상세·썸네일 그리드 표시(≤3초)\n5. 썸네일 선택 → 슬라이드 뷰어 확인\n6. '뒤로' → 최근 스캔 내역에 기록 → 다음 주문 스캔 반복\n\n## 8. 기술 요구사항\n* API: 사내 주문관리 REST API (GET /orders/{orderNo})\n* 세컨드 모니터 제어: Window Management API(웹), Puppeteer + CDP(Node.js) 지원\n* API: 사내 주문관리 REST API (GET /orders/{orderNo})\n* 바코드 라이브러리: zxing-js/browser 또는 Dynamsoft Web SDK\n* 이미지 뷰어: Swiper.js + Lazy Loading\n* 로컬 캐싱: IndexedDB(SWR/React-Query offline persistence)\n* 다크 모드: CSS `prefers-color-scheme` + 토글\n\n## 9. 비기능 요구사항\n| 항목 | 목표 |\n|---|---|\n| 보안 | HTTPS, 최소 권한 카메라 권한, API 토큰 인증, 세컨드 모니터 접근 권한 관리 |\n| 가용성 | 99% 이상 (PWA 오프라인 fallback) |\n| 보안 | HTTPS, 최소 권한 카메라 권한, API 토큰 인증 |\n| 접근성 | WCAG 2.1 AA, 키보드 조작 지원 |\n\n## 10. 출시 범위 & 일정 (MVP)\n| 주 | 마일스톤 |\n|---|---|\n| 1 | 요구사항 확정, 디자인 가이드 |\n| 2–3 | 프론트엔드 개발(스캔·API 연동) |\n| 4 | 썸네일 그리드 & 슬라이드 뷰어 |\n| 5 | 최근 내역, 다크 모드, QA |\n| 6 | 현장 Pilot 배포, 피드백 수집 |\n\n## 11. 리스크 & 완화 전략\n| 리스크 | 영향 | 대응 |\n|---|---|---|\n| 카메라 인식률 저하 | 생산 지연 | 러기드 기기 사양 검증, 라이브러리 AB 테스트 |\n| 네트워크 불안 | 데이터 로딩 실패 | Phase-2 오프라인 캐싱, 재시도 큐 |\n| 사용 거부감 | 도입 실패 | 현장 작업자 조기 테스트 & 피드백 취합 |\n\n## 12. 승인\n제품 책임자: __________________\n일자: __________________________",
      "writedAt": "2025-10-22T03:06:13.796Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n\n## Tech Stack\n\n### Frontend\n- **Framework**: Next.js 15 (App Router, React 19)\n- **Language**: TypeScript 5\n- **Styling**: TailwindCSS 4, shadcn/ui components\n- **State Management**: Zustand, @tanstack/react-query\n- **UI Components**: Radix UI, lucide-react icons, framer-motion\n- **Forms**: react-hook-form, @hookform/resolvers, zod validation\n- **Theme**: next-themes (dark mode support)\n\n### Backend\n- **API Framework**: Hono.js 4 (integrated via Next.js API routes)\n- **Database**: Supabase (PostgreSQL)\n- **Authentication**: @supabase/ssr\n- **HTTP Client**: axios\n\n### Development & Testing\n- **Testing**: Vitest, @testing-library/react, Playwright (e2e)\n- **Linting**: ESLint 9\n- **Package Manager**: npm\n- **Build Tool**: Turbopack (Next.js dev mode)\n\n## Directory Structure\n\n```\n/\n├── src/\n│   ├── app/                        # Next.js app router\n│   │   ├── (protected)/            # protected routes group\n│   │   │   └── dashboard/          # dashboard pages\n│   │   ├── api/[[...hono]]/        # Hono API routes\n│   │   ├── login/                  # authentication pages\n│   │   ├── signup/                 \n│   │   ├── layout.tsx              # root layout\n│   │   └── providers.tsx           # global providers\n│   ├── backend/                    # server-side logic\n│   │   ├── hono/                   # Hono app setup & context\n│   │   ├── http/                   # HTTP response utilities\n│   │   ├── middleware/             # error handling, context\n│   │   └── supabase/               # Supabase server client\n│   ├── components/                 # shared components\n│   │   ├── layout/                 # Header, MainLayout\n│   │   └── ui/                     # shadcn/ui components\n│   ├── features/                   # feature-based modules\n│   │   ├── auth/                   # authentication\n│   │   │   ├── context/            # CurrentUserContext\n│   │   │   ├── hooks/              # useCurrentUser\n│   │   │   └── types.ts            \n│   │   └── [feature]/              \n│   │       ├── backend/            # route, schema, service, error\n│   │       ├── components/         # feature UI components\n│   │       ├── hooks/              # feature-specific hooks\n│   │       ├── lib/                # DTOs, utilities\n│   │       └── types.ts            \n│   ├── constants/                  # global constants\n│   ├── hooks/                      # shared hooks (use-toast)\n│   └── lib/                        \n│       ├── remote/                 # API client (axios)\n│       ├── supabase/               # browser/server Supabase clients\n│       └── utils.ts                # cn utility (tailwind-merge)\n├── public/                         # static assets\n└── supabase/migrations/            # database migrations\n```\n\n## Top-Level Building Blocks\n\n### 1. Authentication Layer\n- **Supabase Auth**: Session management via SSR\n- **Protected Routes**: Route group `(protected)/` with middleware\n- **Context**: `CurrentUserContext` provides user state globally\n\n### 2. API Layer (Hono.js)\n- **Catch-all Route**: `app/api/[[...hono]]/route.ts` \n- **Backend Structure**: Each feature has `backend/{route, schema, service, error}`\n- **Middleware**: Context injection, error handling\n- **Validation**: Zod schemas for request/response\n\n### 3. Frontend Layer\n- **Feature-based Architecture**: Each feature is self-contained\n- **Component Composition**: shadcn/ui + custom components\n- **Data Fetching**: React Query for server state\n- **Client State**: Zustand for local state\n\n### 4. Database Layer\n- **Supabase PostgreSQL**: Managed database\n- **Migrations**: Version-controlled schema changes in `supabase/migrations/`\n- **Type Safety**: Generated TypeScript types from Supabase schema\n\n## Data Flow\n\n### Request Flow (Client → Server)\n1. **Client Action**: User interacts with UI component\n2. **React Query Hook**: Triggers API call via axios client (`lib/remote/api-client.ts`)\n3. **Hono Route**: Request hits `backend/[feature]/route.ts`\n4. **Validation**: Zod schema validates request\n5. **Service Layer**: Business logic in `backend/[feature]/service.ts`\n6. **Supabase Client**: Database query via `backend/supabase/client.ts`\n7. **Response**: JSON response via `backend/http/response.ts`\n\n### Response Flow (Server → Client)\n1. **HTTP Response**: Hono returns JSON\n2. **React Query**: Caches and manages server state\n3. **DTO Transformation**: Data mapped via `features/[feature]/lib/dto.ts`\n4. **Component Render**: UI updates reactively\n\n### Authentication Flow\n1. **Login/Signup**: User submits credentials\n2. **Supabase Auth**: Creates session cookie\n3. **SSR Context**: `@supabase/ssr` validates session on server\n4. **Protected Routes**: Middleware checks authentication\n5. **Client Context**: `CurrentUserContext` provides user data to components\n\n## Key Technical Decisions\n\n### Why Hono.js?\n- Lightweight, fast API framework\n- Native TypeScript support\n- Easy integration with Next.js API routes\n\n### Why Feature-based Architecture?\n- Scalability: Each feature is isolated\n- Maintainability: Clear boundaries between modules\n- Reusability: Shared components in `/components`\n\n### Why Supabase?\n- Managed PostgreSQL with auth built-in\n- Real-time subscriptions ready for future features\n- Type-safe client generation\n\n### Why React Query?\n- Automatic caching and refetching\n- Optimistic updates support\n- SSR-friendly with Next.js\n\n## Performance Considerations\n- **Turbopack**: Fast development builds\n- **Code Splitting**: Automatic route-based splitting\n- **Image Optimization**: Next.js Image component\n- **API Response Caching**: React Query stale-while-revalidate\n",
      "writedAt": "2025-10-22T03:06:13.796Z"
    },
    {
      "type": "guideline",
      "content": "# Code Guideline for Vooster Project\n\n## Tech Stack Specific Guidelines\n\n### Next.js 15 (App Router)\n- **ALWAYS use `use client` directive** for all components (default: client-side rendering)\n- **Page props must be awaited**: `params` and `searchParams` are promises in Next.js 15\n  ```typescript\n  // ✅ Correct\n  export default async function Page({ params }: PageProps) {\n    const { id } = await params;\n  }\n  \n  // ❌ Wrong\n  export default function Page({ params }: PageProps) {\n    const { id } = params; // Error: params is a Promise\n  }\n  ```\n- Use **App Router** (`src/app/`) for all routing\n- Protected routes go in `src/app/(protected)/` route group\n\n### TypeScript\n- **Strict type safety**: Enable all strict mode flags\n- Use `type` over `interface` for consistency (except when extending)\n- Prefer `unknown` over `any`\n- Use Zod schemas for runtime validation + type inference\n\n### Styling (TailwindCSS 4)\n- **Utility-first approach**: Use Tailwind classes directly\n- Use `cn()` utility for conditional classes:\n  ```typescript\n  import { cn } from '@/lib/utils';\n  \n  <div className={cn(\n    'base-class',\n    condition && 'conditional-class',\n    variants[variant]\n  )} />\n  ```\n- **No inline styles** unless absolutely necessary\n- Follow shadcn/ui component patterns for consistency\n\n## Library Usage Guidelines\n\n| Library | Purpose | Usage Pattern |\n|---------|---------|---------------|\n| `date-fns` | Date/time manipulation | Import specific functions, avoid moment.js patterns |\n| `ts-pattern` | Type-safe branching | Replace complex if/else and switch statements |\n| `@tanstack/react-query` | Server state | All API calls go through React Query hooks |\n| `zustand` | Client state | Use for UI state, NOT server state |\n| `react-use` | Common hooks | Check before writing custom hooks |\n| `es-toolkit` | Utilities | Preferred over lodash |\n| `lucide-react` | Icons | Always import specific icons |\n| `zod` | Validation | Define schemas in `backend/schema.ts` |\n| `shadcn/ui` | UI components | Install via `npx shadcn@latest add [component]` |\n| `supabase` | Backend | Use provided client utilities |\n| `react-hook-form` | Forms | Always combine with Zod resolver |\n\n## Directory Structure & File Organization\n\n### Feature-Based Architecture\n```\nsrc/features/[featureName]/\n├── backend/              # Server-side logic\n│   ├── route.ts         # Hono API routes\n│   ├── schema.ts        # Zod validation schemas\n│   ├── service.ts       # Business logic\n│   └── error.ts         # Feature-specific errors\n├── components/          # Feature UI components (use client)\n├── hooks/              # React Query hooks & custom hooks\n├── lib/                # DTOs, utilities\n│   └── dto.ts          # Data transformation functions\n├── types.ts            # TypeScript types\n└── constants.ts        # Feature constants\n```\n\n### Naming Conventions\n- **Routes**: `route.ts` (not `api.ts` or `routes.ts`)\n- **Components**: PascalCase files matching export (`UserCard.tsx` exports `UserCard`)\n- **Hooks**: `use` prefix (`useOrderQuery.ts`)\n- **Utils**: `kebab-case.ts` for multi-word utilities\n\n## Backend Architecture (Hono.js)\n\n### Route Pattern\n```typescript\n// features/orders/backend/route.ts\nimport type { Hono } from 'hono';\nimport { respond, success, failure } from '@/backend/http/response';\nimport { getSupabase, getLogger, type AppEnv } from '@/backend/hono/context';\nimport { OrderParamsSchema } from './schema';\nimport { getOrderById } from './service';\n\nexport const registerOrderRoutes = (app: Hono<AppEnv>) => {\n  app.get('/orders/:id', async (c) => {\n    // 1. Validate input\n    const parsed = OrderParamsSchema.safeParse({ id: c.req.param('id') });\n    if (!parsed.success) {\n      return respond(c, failure(400, 'INVALID_PARAMS', 'Invalid order ID', parsed.error));\n    }\n\n    // 2. Get dependencies from context\n    const supabase = getSupabase(c);\n    const logger = getLogger(c);\n\n    // 3. Call service layer\n    const result = await getOrderById(supabase, parsed.data.id);\n\n    // 4. Handle errors\n    if (!result.ok) {\n      logger.error('Failed to fetch order', result.error);\n      return respond(c, result);\n    }\n\n    // 5. Return success\n    return respond(c, result);\n  });\n};\n```\n\n### Service Layer Pattern\n```typescript\n// features/orders/backend/service.ts\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport { success, failure, type Result } from '@/backend/http/response';\n\nexport async function getOrderById(\n  supabase: SupabaseClient,\n  id: string\n): Promise<Result<Order, OrderError>> {\n  const { data, error } = await supabase\n    .from('orders')\n    .select('*')\n    .eq('id', id)\n    .single();\n\n  if (error) {\n    return failure(500, 'DB_ERROR', 'Failed to fetch order', error);\n  }\n\n  if (!data) {\n    return failure(404, 'NOT_FOUND', 'Order not found');\n  }\n\n  return success(data);\n}\n```\n\n## Frontend Patterns\n\n### Component Structure\n```typescript\n'use client';\n\nimport { useState } from 'react';\nimport type { ComponentProps } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useOrderQuery } from '../hooks/useOrderQuery';\n\ninterface OrderCardProps {\n  orderId: string;\n  onSelect?: (id: string) => void;\n}\n\nexport const OrderCard = ({ orderId, onSelect }: OrderCardProps) => {\n  const query = useOrderQuery(orderId);\n\n  // Early return for loading/error states\n  if (query.isPending) return <LoadingSpinner />;\n  if (query.isError) return <ErrorMessage error={query.error} />;\n\n  const order = query.data;\n\n  return (\n    <article className=\"rounded-lg border p-4\">\n      <h3>{order.name}</h3>\n      <Button onClick={() => onSelect?.(orderId)}>Select</Button>\n    </article>\n  );\n};\n```\n\n### React Query Hook Pattern\n```typescript\n// features/orders/hooks/useOrderQuery.ts\nimport { useQuery } from '@tanstack/react-query';\nimport { apiClient } from '@/lib/remote/api-client';\nimport { orderKeys } from '../constants';\nimport type { Order } from '../types';\n\nexport const useOrderQuery = (orderId: string) => {\n  return useQuery({\n    queryKey: orderKeys.detail(orderId),\n    queryFn: async () => {\n      const response = await apiClient.get<Order>(`/api/orders/${orderId}`);\n      return response.data;\n    },\n    enabled: !!orderId,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n};\n\n// constants.ts\nexport const orderKeys = {\n  all: ['orders'] as const,\n  lists: () => [...orderKeys.all, 'list'] as const,\n  list: (filters: string) => [...orderKeys.lists(), filters] as const,\n  details: () => [...orderKeys.all, 'detail'] as const,\n  detail: (id: string) => [...orderKeys.details(), id] as const,\n};\n```\n\n## Code Style Best Practices\n\n### 1. Early Returns Over Nested Conditions\n```typescript\n// ✅ Good\nfunction processOrder(order: Order) {\n  if (!order.isValid) return null;\n  if (!order.isPaid) return null;\n  \n  return shipOrder(order);\n}\n\n// ❌ Bad\nfunction processOrder(order: Order) {\n  if (order.isValid) {\n    if (order.isPaid) {\n      return shipOrder(order);\n    }\n  }\n  return null;\n}\n```\n\n### 2. Conditional Classes Over Ternaries\n```typescript\n// ✅ Good\n<div className={cn(\n  'base-class',\n  isActive && 'active-class',\n  variant === 'primary' && 'primary-class'\n)} />\n\n// ❌ Bad\n<div className={`base-class ${isActive ? 'active-class' : ''} ${variant === 'primary' ? 'primary-class' : ''}`} />\n```\n\n### 3. Descriptive Names\n```typescript\n// ✅ Good\nconst isUserAuthenticated = checkAuthStatus();\nconst fetchUserOrders = async (userId: string) => { ... };\n\n// ❌ Bad\nconst flag = checkAuthStatus();\nconst getData = async (id: string) => { ... };\n```\n\n### 4. Use Constants Over Magic Values\n```typescript\n// ✅ Good\nconst MAX_RETRY_ATTEMPTS = 3;\nconst API_TIMEOUT_MS = 5000;\n\nif (retryCount > MAX_RETRY_ATTEMPTS) { ... }\n\n// ❌ Bad\nif (retryCount > 3) { ... }\n```\n\n### 5. Functional & Immutable\n```typescript\n// ✅ Good\nconst activeOrders = orders.filter(order => order.status === 'active');\nconst orderIds = orders.map(order => order.id);\n\n// ❌ Bad\nconst activeOrders = [];\nfor (let order of orders) {\n  if (order.status === 'active') {\n    activeOrders.push(order);\n  }\n}\n```\n\n## Error Handling\n\n### Frontend\n```typescript\n// React Query handles errors automatically\nconst query = useOrderQuery(orderId);\n\nif (query.isError) {\n  return <ErrorFallback error={query.error} />;\n}\n```\n\n### Backend\n```typescript\n// Always use Result type\nimport { success, failure, type Result } from '@/backend/http/response';\n\nasync function riskyOperation(): Promise<Result<Data, Error>> {\n  try {\n    const data = await externalAPI();\n    return success(data);\n  } catch (error) {\n    return failure(500, 'API_ERROR', 'External API failed', error);\n  }\n}\n```\n\n## Testing\n\n### Component Tests\n```typescript\nimport { render, screen } from '@testing-library/react';\nimport { OrderCard } from './OrderCard';\n\ndescribe('OrderCard', () => {\n  it('should display order name', () => {\n    render(<OrderCard orderId=\"123\" />);\n    expect(screen.getByText('Order #123')).toBeInTheDocument();\n  });\n});\n```\n\n## Package Management\n\n- **Use npm** (not yarn or pnpm)\n- Install shadcn components: `npx shadcn@latest add [component]`\n- Run type checks: `npm run typecheck`\n\n## Database (Supabase)\n\n- **Never run Supabase locally**\n- Migrations go in `/supabase/migrations/`\n- Use migration files for schema changes:\n  ```sql\n  -- supabase/migrations/20250109_create_orders_table.sql\n  CREATE TABLE orders (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    name TEXT NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT NOW()\n  );\n  ```\n\n## Performance\n\n- Avoid premature optimization\n- Use React Query's built-in caching\n- Lazy load images with Next.js `Image` component\n- Code split with dynamic imports when needed\n\n## Korean Text Handling\n\n- **ALWAYS verify UTF-8 encoding** for Korean text\n- Check for broken characters after code generation\n- Use proper Unicode escaping if needed\n\n## Final Checklist Before Commit\n\n- [ ] All TypeScript errors resolved\n- [ ] No console.logs in production code\n- [ ] Proper error handling in place\n- [ ] Components use `use client` directive\n- [ ] Page params are awaited (Next.js 15)\n- [ ] Korean text renders correctly\n- [ ] Tests pass (`npm test`)\n- [ ] Type check passes (`npm run typecheck`)\n\n## Quick Reference\n\n**Add UI Component**: `npx shadcn@latest add [component]`  \n**Run Tests**: `npm test`  \n**Type Check**: `npm run typecheck`  \n**Dev Server**: `npm run dev`  \n**Build**: `npm run build`  \n\n---\n\n**Remember**: Write code that is simple, readable, and maintainable. Optimize for future developers (including yourself) who will read this code.",
      "writedAt": "2025-10-22T03:06:13.796Z"
    },
    {
      "type": "design-guide",
      "content": "# 바코드 주문 조회 웹앱 Design Guide\n\n## 1. Overall Mood (전체적인 무드)\n\n현장 작업 환경에서의 **신뢰성과 전문성**을 강조하는 디자인 컨셉을 채택합니다. 작업자들이 빠르고 정확하게 정보를 파악할 수 있도록 **깔끔하고 차분한 분위기**를 조성하며, 높은 신뢰감을 주는 **정보 중심적인 디자인**을 구현합니다. \n\n핵심 키워드:\n- **깔끔함**: 불필요한 장식 요소 제거, 정보 전달에 집중\n- **차분함**: 작업 집중도를 높이는 안정적인 색상과 레이아웃\n- **신뢰감**: 일관성 있는 시각적 위계와 명확한 피드백\n- **효율성**: 빠른 작업 흐름을 지원하는 직관적인 인터페이스\n\n## 2. Reference Service (참조 서비스)\n\n- **Name**: Notion\n- **Description**: 올인원 워크스페이스 및 노트 작성 도구\n- **Design Mood**: 밝고 미니멀하며 정보 위계를 명확하게 보여주는 전문적인 디자인\n- **Primary Color**: #2F3437 (Deep Gray)\n- **Secondary Color**: #37352F (Warm Gray)\n\nNotion의 정보 구조화 방식과 깔끔한 카드 레이아웃을 참조하여, 복잡한 주문 정보를 명확하게 전달할 수 있는 디자인을 구현합니다.\n\n## 3. Color & Gradient (색상 & 그라데이션)\n\n**색상 성향**: Cool 톤, 낮은-중간 채도 (Low-to-Medium Saturation)\n\n### 주요 색상 팔레트\n- **Primary Color**: #1E2A38 (Deep Navy) - 헤더, 주요 버튼\n- **Secondary Color**: #4F6D7A (Steel Blue) - 보조 버튼, 강조 아이콘\n- **Accent Color**: #2ECC71 (Emerald) - 성공 상태, 중요 하이라이트\n- **Background**: #F7F9FB (Ghost White) - 페이지 베이스 배경\n- **Surface**: #FFFFFF (Pure White) - 카드, 모달 배경\n- **Text Primary**: #2B2B2B (Charcoal) - 주요 텍스트\n- **Text Secondary**: #5C6973 (Slate Gray) - 보조 텍스트, 레이블\n- **Error**: #E24C4B (Crimson) - 오류 상태, 경고\n\n### 색상 사용 우선순위\n1. **최우선**: Primary (Deep Navy) - 주요 액션 버튼, 헤더\n2. **중요**: Accent (Emerald) - 스캔 성공, 완료 상태\n3. **보조**: Secondary (Steel Blue) - 보조 버튼, 아이콘\n4. **배경**: Background/Surface - 정보 구조화\n\n**Mood**: 차분하고 전문적인 Cool 톤으로 작업 집중도를 높이며, 낮은 채도로 눈의 피로를 최소화합니다.\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n\n### 폰트 패밀리\n- **한글/영문**: \"Noto Sans KR\", \"Inter\", sans-serif\n- **코드/숫자**: \"JetBrains Mono\", monospace\n\n### 타이포그래피 스케일 (14px-32px)\n- **Heading 1**: Noto Sans KR, 32px, Weight 600 - 페이지 제목\n- **Heading 2**: Noto Sans KR, 24px, Weight 600 - 섹션 제목\n- **Heading 3**: Noto Sans KR, 20px, Weight 600 - 카드 제목\n- **Body Large**: Noto Sans KR, 18px, Weight 400 - 주요 정보\n- **Body**: Noto Sans KR, 16px, Weight 400 - 일반 텍스트\n- **Body Small**: Noto Sans KR, 14px, Weight 400 - 보조 정보\n- **Caption**: Noto Sans KR, 12px, Weight 500 - 레이블, 상태\n\n### 줄 간격 및 자간\n- **Line Height**: 1.5 (본문), 1.3 (제목)\n- **Letter Spacing**: -0.01em (한글), 0em (영문)\n\n## 5. Layout & Structure (레이아웃 & 구조)\n\n### 그리드 시스템\n- **기본 단위**: 8pt Grid System\n- **컨테이너 최대 폭**: 1440px (데스크톱)\n- **모바일**: 100% Fluid Width\n- **패딩**: 16px (모바일), 24px (태블릿), 32px (데스크톱)\n\n### 네비게이션 구조\n**Top Bar 1열 구조** 채택\n- **좌측**: 로고 + 카메라/주문조회 토글 버튼\n- **우측**: 최근 내역, 도움말, 다크모드 토글\n- **높이**: 64px (모바일), 72px (데스크톱)\n\n### 레이아웃 원칙\n1. **수직 공간 최대 활용**: 카메라 뷰와 주문 정보 표시 영역 확보\n2. **일관성**: 모바일-데스크톱 간 동일한 네비게이션 구조\n3. **접근성**: 최소 터치 영역 44×44px 보장\n\n## 6. Visual Style (비주얼 스타일)\n\n### 아이콘 시스템\n- **아이콘 세트**: Lucide React\n- **선 두께**: 1.5px\n- **스타일**: Round Cap\n- **크기**: 16px (Small), 20px (Medium), 24px (Large)\n\n### 이미지 스타일\n- **썸네일**: 1:1 비율, 8px 라운드 모서리\n- **주문 이미지**: 원본 비율 유지, 6px 라운드 모서리\n- **로딩 상태**: Skeleton UI with shimmer effect\n\n### 그림자 시스템\n- **Card Shadow**: 0 1px 3px rgba(0,0,0,0.1), 0 1px 2px rgba(0,0,0,0.06)\n- **Modal Shadow**: 0 20px 25px rgba(0,0,0,0.15), 0 10px 10px rgba(0,0,0,0.04)\n- **Button Hover**: 0 4px 6px rgba(0,0,0,0.1)\n\n### 라운드 모서리\n- **버튼**: 6px\n- **카드**: 8px\n- **모달**: 12px\n- **이미지**: 6px\n\n## 7. UX Guide (UX 가이드)\n\n### 타겟 사용자별 UX 전략\n**전문가 + 초보자 모두 지원하는 Progressive Disclosure 방식**\n\n### 전문가용 (Expert Mode)\n- **즉시 작업 모드**: 앱 실행 시 바로 카메라 화면 표시\n- **최소 UI**: 핵심 기능만 노출, 고급 기능은 숨김\n- **키보드 단축키**: 스페이스바(스캔), ESC(취소), 화살표(이미지 탐색)\n\n### 초보자용 (Beginner Support)\n- **온보딩**: 첫 방문 시 3-4장의 튜토리얼 슬라이드\n- **도움말**: 우상단 '?' 아이콘으로 언제든 접근 가능\n- **시각적 가이드**: 바코드 스캔 영역 표시, 진행 상태 명확한 피드백\n\n### 핵심 UX 원칙\n1. **3초 룰**: 스캔 후 3초 내 결과 표시\n2. **원터치 원칙**: 주요 액션은 1번의 터치로 완료\n3. **피드백 필수**: 모든 액션에 즉각적인 시각/촉각 피드백\n4. **오류 복구**: 명확한 오류 메시지와 해결 방법 제시\n\n## 8. UI Component Guide (UI 컴포넌트 가이드)\n\n### 버튼 (Buttons)\n```\nPrimary Button:\n- 배경: #1E2A38 (Deep Navy)\n- 텍스트: #FFFFFF\n- 높이: 48px (모바일), 44px (데스크톱)\n- 패딩: 16px 24px\n- 라운드: 6px\n\nSecondary Button:\n- 테두리: 1.5px solid #4F6D7A\n- 텍스트: #4F6D7A\n- 배경: transparent\n- hover: 배경 #4F6D7A, 텍스트 #FFFFFF\n\nGhost Button:\n- 텍스트: #4F6D7A\n- 배경: transparent\n- hover: 배경 rgba(79, 109, 122, 0.1)\n```\n\n### 카드 (Cards)\n```\n기본 카드:\n- 배경: #FFFFFF\n- 그림자: Card Shadow\n- 라운드: 8px\n- 패딩: 16px\n- 테두리: 1px solid #E5E7EB\n\n주문 정보 카드:\n- 헤더: 주문번호 + 상태 배지\n- 본문: 주문명, 수량, 옵션 정보\n- 하단: 썸네일 그리드 (최대 4개 미리보기)\n```\n\n### 입력 필드 (Input Fields)\n```\n기본 입력 필드:\n- 높이: 48px\n- 패딩: 12px 16px\n- 테두리: 1.5px solid #D1D5DB\n- 라운드: 6px\n- focus: 테두리 #2ECC71\n\n검색 필드:\n- 좌측 아이콘: Search (20px)\n- placeholder: \"주문번호로 검색...\"\n```\n\n### 모달 (Modals)\n```\n이미지 뷰어 모달:\n- 전체화면 오버레이\n- 배경: rgba(0,0,0,0.9)\n- 좌우 스와이프 지원\n- 상단: 닫기 버튼 + 이미지 인덱스\n- 하단: 썸네일 네비게이션\n\n일반 모달:\n- 중앙 정렬\n- 최대 폭: 480px (모바일에서 90%)\n- 라운드: 12px\n- 패딩: 24px\n```\n\n### 네비게이션 바 (Navigation Bar)\n```\nTop Bar:\n- 높이: 64px (모바일), 72px (데스크톱)\n- 배경: #FFFFFF\n- 하단 테두리: 1px solid #E5E7EB\n- 패딩: 0 16px\n\n좌측 영역:\n- 로고 (32px 높이)\n- 모드 토글 (카메라/검색)\n\n우측 영역:\n- 최근 내역 아이콘\n- 도움말 아이콘\n- 다크모드 토글\n```\n\n### 최근 내역 드로어 (Recent History)\n```\n모바일: Bottom Sheet\n- 하단에서 올라오는 슬라이드\n- 최대 높이: 70vh\n- 드래그 핸들 포함\n\n데스크톱: Side Panel\n- 우측에서 슬라이드\n- 폭: 320px\n- 반투명 오버레이\n```\n\n### 상태 표시 (Status Indicators)\n```\n성공 상태:\n- 색상: #2ECC71\n- 아이콘: Check Circle\n- 진동: 200ms\n\n오류 상태:\n- 색상: #E24C4B\n- 아이콘: X Circle\n- 진동: 300ms (2회)\n\n로딩 상태:\n- Skeleton UI\n- Shimmer 효과\n- 스피너: 20px, #4F6D7A\n```\n\n### 다크 모드 (Dark Mode)\n```\n배경 색상:\n- 페이지: #121212\n- 카드: #1E1E1E\n- 네비게이션: #1F1F1F\n\n텍스트 색상:\n- Primary: #E1E1E1\n- Secondary: #A1A1A1\n\nPrimary 색상 유지: #1E2A38 → 약간 밝게 #2A3A4A\n```\n\n### 접근성 가이드라인\n- **색상 대비**: 최소 4.5:1 (WCAG AA 준수)\n- **터치 영역**: 최소 44×44px\n- **키보드 네비게이션**: 모든 인터랙티브 요소 접근 가능\n- **스크린 리더**: 적절한 aria-label 및 role 속성 사용\n- **모션**: prefers-reduced-motion 미디어 쿼리 지원\n\n### 애니메이션 및 트랜지션\n```\n기본 트랜지션: 200ms ease-in-out\n버튼 hover: 150ms ease\n모달 등장: 300ms ease-out\n이미지 슬라이드: 250ms ease-in-out\n스캔 성공 피드백: 200ms fade-in\n```",
      "writedAt": "2025-10-22T03:06:13.796Z"
    },
    {
      "type": "ia",
      "content": "# Information Architecture (IA): 바코드 주문 조회 웹앱\n\n## 1. Sitemap (사이트맵)\n\n```\n바코드 주문 조회 앱\n│\n├── 인증 (Authentication)\n│   ├── /login - 로그인 페이지\n│   └── /signup - 회원가입 페이지\n│\n├── 메인 기능 (Protected Routes)\n│   ├── / (Home/Dashboard)\n│   │   ├── 바코드 스캔 모드\n│   │   └── 검색 모드\n│   │\n│   ├── /orders/:orderId - 주문 상세 페이지\n│   │   ├── 주문 정보 카드\n│   │   ├── 썸네일 그리드\n│   │   └── 이미지 슬라이드 뷰어 (모달)\n│   │\n│   └── /history - 최근 스캔 내역\n│       ├── 내역 리스트 (최대 20건)\n│       └── 필터/검색 기능\n│\n└── 기타 페이지\n    ├── /help - 도움말/튜토리얼\n    ├── /settings - 설정 (다크모드, 알림 등)\n    └── /404 - 페이지를 찾을 수 없음\n```\n\n## 2. Page Hierarchy (페이지 계층 구조)\n\n### Level 1: 인증 레이어\n- **목적**: 사용자 인증 및 세션 관리\n- **접근성**: 비로그인 사용자\n- **페이지**: `/login`, `/signup`\n\n### Level 2: 메인 대시보드\n- **목적**: 핵심 기능 접근 포인트\n- **접근성**: 로그인 사용자\n- **페이지**: `/` (홈)\n- **주요 기능**:\n  - 바코드 스캔 인터페이스\n  - 주문번호 검색\n  - 최근 내역 빠른 접근\n\n### Level 3: 주문 상세\n- **목적**: 특정 주문의 상세 정보 표시\n- **접근성**: 로그인 사용자\n- **페이지**: `/orders/:orderId`\n- **진입 경로**:\n  - 바코드 스캔 후 자동 이동\n  - 최근 내역에서 선택\n  - 검색 결과 클릭\n\n### Level 4: 보조 페이지\n- **목적**: 지원 기능 및 설정\n- **접근성**: 로그인 사용자\n- **페이지**: `/history`, `/settings`, `/help`\n\n## 3. Core User Flows (핵심 사용자 흐름)\n\n### Flow 1: 바코드 스캔 → 주문 확인\n```\n시작: 메인 대시보드 (/)\n  ↓\n카메라 활성화\n  ↓\n바코드 조준 및 자동 인식\n  ↓\n로딩 인디케이터 (최대 3초)\n  ↓\n주문 상세 페이지 (/orders/:orderId) 자동 이동\n  ↓\n주문 정보 + 썸네일 그리드 표시\n  ↓\n[선택] 썸네일 클릭 → 슬라이드 뷰어 모달\n  ↓\n뒤로 가기 → 메인 대시보드\n  ↓\n최근 내역에 자동 저장\n```\n\n### Flow 2: 최근 내역 재조회\n```\n시작: 메인 대시보드 (/)\n  ↓\n상단 바 \"최근 내역\" 아이콘 클릭\n  ↓\n사이드 패널/바텀 시트 오픈\n  ↓\n최근 스캔 내역 리스트 (최대 20건)\n  ↓\n원하는 주문 선택\n  ↓\n주문 상세 페이지 (/orders/:orderId) 이동\n  ↓\n캐시된 데이터 즉시 표시 (< 1초)\n```\n\n### Flow 3: 주문번호 직접 검색\n```\n시작: 메인 대시보드 (/)\n  ↓\n스캔 모드 → 검색 모드 토글\n  ↓\n검색 필드에 주문번호 입력\n  ↓\n자동완성 제안 (최근 내역 기반)\n  ↓\n검색 버튼 클릭 or 엔터\n  ↓\n주문 상세 페이지 (/orders/:orderId) 이동\n```\n\n### Flow 4: 썸네일 확대 및 탐색\n```\n시작: 주문 상세 페이지 (/orders/:orderId)\n  ↓\n썸네일 그리드에서 이미지 선택\n  ↓\n전체화면 슬라이드 뷰어 모달 오픈\n  ↓\n좌우 스와이프로 이미지 탐색\n  ↓\n핀치 줌으로 확대\n  ↓\n닫기 버튼 or ESC → 주문 상세 페이지 복귀\n```\n\n### Flow 5: 첫 사용자 온보딩\n```\n시작: 첫 로그인 후 메인 대시보드\n  ↓\n온보딩 모달 자동 표시\n  ↓\n슬라이드 1: \"바코드 스캔 방법\"\n  ↓\n슬라이드 2: \"주문 정보 확인하기\"\n  ↓\n슬라이드 3: \"최근 내역 활용하기\"\n  ↓\n\"시작하기\" 버튼 → 온보딩 완료\n  ↓\n메인 대시보드 (카메라 활성화)\n```\n\n## 4. Navigation Structure (네비게이션 구조)\n\n### Primary Navigation (상단 바)\n```\n┌─────────────────────────────────────────────────────┐\n│ [로고] [스캔/검색 토글]    [최근내역] [도움말] [다크모드] │\n└─────────────────────────────────────────────────────┘\n```\n\n**좌측 영역**:\n- **로고**: 클릭 시 메인 대시보드로 이동\n- **스캔/검색 토글**: 스캔 모드 ↔ 검색 모드 전환\n\n**우측 영역**:\n- **최근 내역 아이콘**: 최근 스캔 내역 드로어 오픈\n- **도움말 아이콘**: 도움말 페이지 (/help) 이동\n- **다크모드 토글**: 라이트/다크 테마 전환\n\n### Secondary Navigation (최근 내역 드로어)\n- **모바일**: 하단에서 올라오는 Bottom Sheet\n- **데스크톱**: 우측에서 슬라이드되는 Side Panel\n- **내용**:\n  - 최근 스캔 내역 리스트 (최대 20건)\n  - 각 항목: 주문번호, 주문명, 스캔 시각\n  - 클릭 시 해당 주문 상세 페이지로 이동\n\n### Contextual Navigation (페이지별)\n- **주문 상세 페이지**: \n  - 상단: 뒤로 가기 버튼\n  - 하단: 썸네일 그리드 (탭하여 슬라이드 뷰어 오픈)\n  \n- **슬라이드 뷰어 모달**:\n  - 상단: 닫기 버튼 + 이미지 인덱스 (1/4)\n  - 중앙: 이미지 (스와이프 가능)\n  - 하단: 썸네일 네비게이션 바\n\n## 5. Information Grouping (정보 그룹화)\n\n### 메인 대시보드 (/)\n```\n┌─────────────────────────────────────┐\n│       Top Navigation Bar            │\n├─────────────────────────────────────┤\n│                                     │\n│   [스캔 모드]                        │\n│   ┌───────────────────────────┐    │\n│   │   카메라 프리뷰 영역        │    │\n│   │                           │    │\n│   │   바코드 인식 가이드       │    │\n│   └───────────────────────────┘    │\n│                                     │\n│   또는                              │\n│                                     │\n│   [검색 모드]                        │\n│   ┌───────────────────────────┐    │\n│   │ 🔍 주문번호 검색...        │    │\n│   └───────────────────────────┘    │\n│                                     │\n│   최근 스캔 내역 (3건 미리보기)      │\n│   ┌─────────────────────────┐      │\n│   │ 주문 #12345             │      │\n│   ├─────────────────────────┤      │\n│   │ 주문 #12344             │      │\n│   ├─────────────────────────┤      │\n│   │ 주문 #12343             │      │\n│   └─────────────────────────┘      │\n│   [전체 보기 →]                     │\n│                                     │\n└─────────────────────────────────────┘\n```\n\n### 주문 상세 페이지 (/orders/:orderId)\n```\n┌─────────────────────────────────────┐\n│  [← 뒤로]    주문 상세              │\n├─────────────────────────────────────┤\n│                                     │\n│   주문 정보 카드                     │\n│   ┌───────────────────────────┐    │\n│   │ 주문번호: #12345          │    │\n│   │ 상태: [진행중] 🟢          │    │\n│   ├───────────────────────────┤    │\n│   │ 주문명: 명함 인쇄          │    │\n│   │ 수량: 1,000장             │    │\n│   │ 옵션: 양면, 코팅          │    │\n│   └───────────────────────────┘    │\n│                                     │\n│   썸네일 그리드                      │\n│   ┌──────┬──────┬──────┬──────┐   │\n│   │ 이미지│ 이미지│ 이미지│ 이미지│   │\n│   │  1   │  2   │  3   │  4   │   │\n│   └──────┴──────┴──────┴──────┘   │\n│                                     │\n│   [모두 보기]                       │\n│                                     │\n└─────────────────────────────────────┘\n```\n\n### 최근 내역 드로어 (/history or 드로어)\n```\n┌─────────────────────────────────────┐\n│  최근 스캔 내역             [닫기 X]  │\n├─────────────────────────────────────┤\n│  🔍 검색...                          │\n├─────────────────────────────────────┤\n│                                     │\n│  오늘                                │\n│  ┌───────────────────────────────┐  │\n│  │ #12345 - 명함 인쇄            │  │\n│  │ 오후 2:30                     │  │\n│  └───────────────────────────────┘  │\n│  ┌───────────────────────────────┐  │\n│  │ #12344 - 전단지 인쇄          │  │\n│  │ 오전 11:15                    │  │\n│  └───────────────────────────────┘  │\n│                                     │\n│  어제                                │\n│  ┌───────────────────────────────┐  │\n│  │ #12343 - 포스터 제작          │  │\n│  │ 오후 4:00                     │  │\n│  └───────────────────────────────┘  │\n│                                     │\n│  ... (최대 20건)                    │\n│                                     │\n└─────────────────────────────────────┘\n```\n\n## 6. Content Priority (콘텐츠 우선순위)\n\n### 메인 대시보드\n1. **최우선**: 바코드 스캔 인터페이스 (카메라 뷰)\n2. **중요**: 스캔/검색 모드 전환 토글\n3. **보조**: 최근 스캔 내역 미리보기 (3건)\n4. **부가**: 네비게이션 바 (최근 내역, 도움말)\n\n### 주문 상세 페이지\n1. **최우선**: 주문 정보 카드 (주문번호, 상태, 주문명)\n2. **중요**: 썸네일 그리드 (전체 이미지 미리보기)\n3. **보조**: 수량, 옵션 등 추가 정보\n4. **부가**: 뒤로 가기, 공유 버튼\n\n### 슬라이드 뷰어\n1. **최우선**: 고해상도 이미지\n2. **중요**: 좌우 스와이프 영역\n3. **보조**: 이미지 인덱스 (1/4)\n4. **부가**: 닫기 버튼, 하단 썸네일 네비게이션\n\n## 7. URL Structure (URL 구조)\n\n| URL Pattern | 페이지 | 설명 |\n|-------------|--------|------|\n| `/` | 메인 대시보드 | 바코드 스캔/검색 화면 |\n| `/login` | 로그인 | 사용자 인증 |\n| `/signup` | 회원가입 | 신규 사용자 등록 |\n| `/orders/:orderId` | 주문 상세 | 특정 주문 정보 표시 |\n| `/orders/:orderId?image=2` | 주문 상세 + 이미지 뷰어 | 특정 이미지 바로 표시 |\n| `/history` | 최근 내역 (전체) | 최대 20건의 스캔 내역 |\n| `/settings` | 설정 | 앱 설정 (다크모드, 알림 등) |\n| `/help` | 도움말 | 튜토리얼 및 FAQ |\n\n## 8. State Management (상태 관리)\n\n### URL State (URL 파라미터로 관리)\n- 주문 ID: `/orders/:orderId`\n- 이미지 인덱스: `?image=2`\n- 검색 쿼리: `?q=12345`\n\n### Local State (컴포넌트 레벨)\n- 카메라 활성화 여부\n- 스캔/검색 모드 토글\n- 모달 열림/닫힘 상태\n\n### Global State (Zustand)\n- 사용자 인증 정보\n- 다크모드 설정\n- 최근 스캔 내역 (IndexedDB 동기화)\n\n### Server State (React Query)\n- 주문 정보 (`/api/orders/:orderId`)\n- 썸네일 이미지 URL 리스트\n- 사용자 프로필\n\n## 9. Accessibility & Navigation Patterns\n\n### 키보드 네비게이션\n- **Tab**: 다음 인터랙티브 요소로 이동\n- **Shift + Tab**: 이전 요소로 이동\n- **Enter**: 버튼 클릭, 링크 활성화\n- **ESC**: 모달 닫기, 검색 취소\n- **Space**: 스캔 트리거 (카메라 모드)\n- **Arrow Left/Right**: 슬라이드 뷰어 이미지 탐색\n\n### 터치 제스처\n- **탭**: 선택/활성화\n- **롱 프레스**: 컨텍스트 메뉴 (주문 삭제 등)\n- **스와이프 좌/우**: 이미지 탐색\n- **핀치 줌**: 이미지 확대/축소\n- **풀 투 리프레시**: 최근 내역 새로고침\n\n### Screen Reader 지원\n- 모든 인터랙티브 요소에 `aria-label` 제공\n- 이미지에 `alt` 텍스트\n- 로딩 상태에 `aria-live` 영역\n- 네비게이션에 `nav` 및 `role` 속성\n\n## 10. Responsive Breakpoints\n\n| Device | Breakpoint | Layout Changes |\n|--------|------------|----------------|\n| Mobile | < 768px | 1열 레이아웃, 바텀 시트, 전체화면 카메라 |\n| Tablet | 768px - 1024px | 2열 그리드, 사이드 패널 |\n| Desktop | > 1024px | 3-4열 그리드, 고정 사이드 패널 |\n\n### 반응형 적응\n- **모바일**: 수직 스크롤, Bottom Sheet, Hamburger Menu\n- **태블릿**: 2열 그리드, Side Panel, Floating Button\n- **데스크톱**: 다단 레이아웃, 고정 사이드바, Hover 상태\n\n## 11. Error States & Empty States\n\n### 404 - 주문을 찾을 수 없음\n```\n┌─────────────────────────────────────┐\n│  주문을 찾을 수 없습니다             │\n│                                     │\n│  🔍                                 │\n│                                     │\n│  입력한 주문번호가 존재하지 않습니다. │\n│                                     │\n│  [다시 스캔하기]  [검색하기]        │\n└─────────────────────────────────────┘\n```\n\n### 네트워크 오류\n```\n┌─────────────────────────────────────┐\n│  네트워크 연결 오류                  │\n│                                     │\n│  ⚠️                                  │\n│                                     │\n│  인터넷 연결을 확인해주세요.         │\n│                                     │\n│  [재시도]                           │\n└─────────────────────────────────────┘\n```\n\n### 최근 내역 없음\n```\n┌─────────────────────────────────────┐\n│  최근 스캔 내역                      │\n│                                     │\n│  📭                                  │\n│                                     │\n│  아직 스캔한 주문이 없습니다.        │\n│  바코드를 스캔하여 시작하세요!       │\n│                                     │\n└─────────────────────────────────────┘\n```\n\n## 12. Quick Actions & Shortcuts\n\n### 메인 대시보드 퀵 액션\n- **Floating Action Button (FAB)**: 빠른 스캔 시작\n- **최근 내역 3건 미리보기**: 탭하여 바로 접근\n- **검색 자동완성**: 이전 검색어 기반 제안\n\n### 주문 상세 페이지 퀵 액션\n- **공유 버튼**: 주문 정보 공유\n- **썸네일 전체 보기**: 슬라이드 뷰어로 바로 이동\n- **이전/다음 주문**: 최근 내역 기준 이동\n\n### 글로벌 퀵 액션\n- **다크모드 토글**: 상단 바에서 즉시 전환\n- **도움말 모달**: 단축키 `?` 또는 아이콘 클릭\n- **최근 내역**: 단축키 `H` 또는 아이콘 클릭",
      "writedAt": "2025-10-22T03:06:13.796Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-10-22T03:06:13.796Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-10-22T03:06:13.796Z"
    }
  ]
}